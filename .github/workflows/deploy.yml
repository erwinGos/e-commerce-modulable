name: Deploy Latest Release

on:
  push:
    branches:
      - minor-deploy
      - major-deploy

jobs:
  run-tests:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x

      - name: Restore dependencies
        run: dotnet restore "./UnitTest/UnitTest.csproj"

      - name: Test
        run: dotnet test UnitTest/UnitTest.csproj --configuration "$BUILD_CONFIG" --logger "trx;LogFileName=test-results.trx" || true

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: DotNET Tests
          path: "**/test-results.trx"                            
          reporter: dotnet-trx
          fail-on-error: true
  save-build-to-images:
    runs-on: self-hosted
    needs: run-tests
    steps:
      - name: Pull Data from main branch
        uses: actions/checkout@v2

      - name: Build Docker images
        run: |
          export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          export BDD_CONNECTION=${{ secrets.BDD_CONNECTION }}
          export STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
          export FRONT_END_URL=${{ secrets.FRONT_END_URL }}
          sudo docker-compose -f docker-compose.yml build
          sudo docker save e-commerce-modulable_backend > e-commerce-modulable_backend.tar 
      - name: Transfer Docker Image to Server
        run: |
          sshpass -p ${{ secrets.PASSWORD }} scp -o StrictHostKeyChecking=no e-commerce-modulable_backend.tar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/root/
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      - name: Load Docker Image on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            ./resetimages.sh
            
      - name: Remove Docker Images
        run: sudo docker image prune -a -f
